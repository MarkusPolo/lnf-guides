---
const limit = 12;
---

<div id="search-overlay" class="fixed inset-0 hidden" aria-hidden="true">
  <div class="absolute inset-0 bg-black/70" id="search-backdrop"></div>
  <div role="dialog" aria-modal="true" aria-label="Site search"
       class="relative z-10 mx-auto mt-24 max-w-3xl rounded-[--radius-card] bg-surface border border-border/60 shadow-[--shadow-soft]">
    <div class="p-4 border-b border-border/60">
      <input id="search-input" type="search" placeholder="Search guides, news, updates..."
             class="w-full bg-bg border border-border/60 rounded-full px-4 py-3 outline-none"
             autocomplete="off" />
    </div>
    <div id="search-results" class="max-h-[60vh] overflow-auto p-2 divide-y divide-border/50"></div>
  </div>
</div>

<script>
// @ts-nocheck
  let overlay, input, results, backdrop;
  let pagefindReady = false;
  let pagefind = null; // modul mit { init, search, ... }
  let open = false;
  let activeIndex = -1;
  let items = [];
  const limit = 12;

  function toggle(state) {
    open = state ?? !open;
    overlay.classList.toggle('hidden', !open);
    document.body.style.overflow = open ? 'hidden' : '';
    if (open) {
      input.focus();
      ensurePagefindLoaded();
    } else {
      input.value = '';
      results.innerHTML = '';
      activeIndex = -1;
      items = [];
    }
  }

  async function ensurePagefindLoaded() {
    if (pagefindReady) return;

    // In dev gibt es keinen Index -> Hinweis
    if (!import.meta.env.PROD) {
      results.innerHTML = `<div class="p-3 text-sm text-text2">
        Search index not available in dev. Run <code>npm run build</code> then <code>npm run preview</code>.
      </div>`;
      return;
    }

    try {
      // dynamisches ESM-Import ohne Vorab-Analyse durch den Bundler
      const dynImport = new Function('p', 'return import(p)');
      const mod = await dynImport('/pagefind/pagefind.js');

      // Modul muss Funktions-API enthalten
      if (!mod || typeof mod.init !== 'function' || typeof mod.search !== 'function') {
        throw new Error('Pagefind API not found');
      }

      // optional: Basispfade könnten hier gesetzt werden: await mod.options({ basePath: '/pagefind/' });
      await mod.init();   // lädt WASM/Metadaten
      pagefind = mod;
      pagefindReady = true;
    } catch (e) {
      console.warn('Failed to load Pagefind module.', e);
      results.innerHTML = `<div class="p-3 text-sm text-text2">
        Could not load search index. Ensure <code>npm run build</code> generated <code>/dist/pagefind/*</code>.
      </div>`;
    }
  }

  async function renderResults(q) {
    if (!pagefindReady || !q?.trim()) { results.innerHTML = ''; return; }

    const r = await pagefind.search(q.trim());
    items = await Promise.all((r?.results ?? []).slice(0, limit).map(x => x.data()));

    results.innerHTML = items.map((it, i) => {
      const url = it.url || '#';
      const title = it.meta?.title || url;
      const path = (() => { try { return new URL(url, location.origin).pathname; } catch { return url; } })();
      const section = path.split('/').filter(Boolean)[0]?.toUpperCase() || '';
      const excerpt = it.excerpt || '';
      return `
        <a href="${url}" class="block p-3 hover:bg-bg/60 focus:bg-bg/60 outline-none ${i===activeIndex?'bg-bg/60':''}">
          <div class="flex items-center gap-2 text-xs text-text2 mb-1">
            ${section ? `<span class="px-2 py-0.5 rounded-full bg-border/40">${section}</span>` : ''}
            <span>${path}</span>
          </div>
          <div class="font-semibold">${title}</div>
          <p class="text-sm text-text2 line-clamp-2">${excerpt}</p>
        </a>
      `;
    }).join('');
  }

  function onKey(e) {
    if ((e.key === 'k' && (e.metaKey || e.ctrlKey)) || (e.key === 'F' && e.ctrlKey)) {
      e.preventDefault(); toggle(true);
    } else if (open && e.key === 'Escape') {
      toggle(false);
    } else if (open && (e.key === 'ArrowDown' || e.key === 'ArrowUp')) {
      e.preventDefault();
      const dir = e.key === 'ArrowDown' ? 1 : -1;
      activeIndex = Math.max(0, Math.min((items.length - 1), activeIndex + dir));
      renderResults(input.value);
      focusActive();
    } else if (open && e.key === 'Enter' && activeIndex >= 0) {
      const links = results.querySelectorAll('a');
      links[activeIndex]?.click();
    }
  }

  function focusActive() {
    const links = results.querySelectorAll('a');
    links.forEach((a, idx) => { if (idx === activeIndex) a.focus(); });
  }

  document.addEventListener('DOMContentLoaded', () => {
    overlay = document.getElementById('search-overlay');
    input = document.getElementById('search-input');
    results = document.getElementById('search-results');
    backdrop = document.getElementById('search-backdrop');

    backdrop.addEventListener('click', () => toggle(false));
    input.addEventListener('input', (e) => renderResults(e.target.value));
  });

  window.addEventListener('keydown', onKey);
</script>
