---
interface Props {
  repo: string;
  repoId: string;
  category: string;
  categoryId: string;
  mapping?: string;
  lang?: string;
  theme?: string;
  class?: string;
}

const {
  repo,
  repoId,
  category,
  categoryId,
  mapping = "pathname",
  lang = "en",
  theme = "preferred_color_scheme",
  class: cls = "",
} = Astro.props as Props;

const hostId = `giscus-host-${Math.random().toString(36).slice(2)}`;
const cfg = { repo, repoId, category, categoryId, mapping, lang, theme };
---

<section class={`mt-10 ${cls}`}>
  <div class="rounded-card border border-border/60 bg-[#0f1422] p-4 shadow-soft">
    <h2 class="text-lg font-extrabold mb-3">Comments</h2>
    <div id={hostId} class="min-h-[200px]">
      <div class="text-sm text-text2">
        Comments are blocked until you enable <strong>External embeds</strong> in your privacy settings.
        <button data-privacy-open class="underline">Privacy settings</button>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ hostId, cfg }}>
  // @ts-nocheck
  (function () {
    const LS_KEYS = ["lnf-consent-v1", "lnf-consent"]; // lese beide zur Sicherheit
    let mounted = false;

    function readLS() {
      for (const k of LS_KEYS) {
        try {
          const raw = localStorage.getItem(k);
          if (raw) return JSON.parse(raw);
        } catch {}
      }
      return null;
    }

    // Liefert immer die Decisions-Form { analytics, external, ads }
    function getDecisions() {
      try {
        const viaApi = window.consent?.get?.();
        if (viaApi && typeof viaApi === "object") {
          // Kann entweder direkt die Decisions sein ODER ein Record
          if ("external" in viaApi || "analytics" in viaApi || "ads" in viaApi) return viaApi;
          if ("decisions" in viaApi) return viaApi.decisions;
        }
      } catch {}
      const rec = readLS();
      if (rec?.decisions) return rec.decisions;
      return { analytics: false, external: false, ads: false };
    }

    function allowExternal() {
      return !!getDecisions().external;
    }

    function mountGiscus() {
      const host = document.getElementById(hostId);
      if (!host) return;
      // Schon vorhanden?
      if (host.querySelector("iframe.giscus-frame") || document.getElementById("giscus-script")) {
        mounted = true;
        return;
      }
      const s = document.createElement("script");
      s.src = "https://giscus.app/client.js";
      s.async = true;
      s.crossOrigin = "anonymous";
      s.id = "giscus-script";
      s.setAttribute("data-repo", cfg.repo);
      s.setAttribute("data-repo-id", cfg.repoId);
      s.setAttribute("data-category", cfg.category);
      s.setAttribute("data-category-id", cfg.categoryId);
      s.setAttribute("data-mapping", cfg.mapping);
      s.setAttribute("data-strict", "0");
      s.setAttribute("data-reactions-enabled", "1");
      s.setAttribute("data-emit-metadata", "0");
      s.setAttribute("data-input-position", "bottom");
      s.setAttribute("data-theme", cfg.theme);
      s.setAttribute("data-lang", cfg.lang);
      host.innerHTML = "";
      host.appendChild(s);
      mounted = true;
    }

    function unmountGiscus() {
      const host = document.getElementById(hostId);
      if (!host) return;
      host.innerHTML =
        '<div class="text-sm text-text2">Comments are blocked until you enable <strong>External embeds</strong> in your privacy settings. <button data-privacy-open class="underline">Privacy settings</button></div>';
      document.getElementById("giscus-script")?.remove();
      mounted = false;
    }

    function apply() {
      if (allowExternal()) mountGiscus();
      else unmountGiscus();
    }

    // Auf beide Event-Varianten reagieren (detail kann Decisions ODER Record sein)
    function onConsentEvent(e) {
      const d = e?.detail;
      const decisions = d && (d.external !== undefined ? d : d.decisions);
      if (decisions && decisions.external === true) {
        mountGiscus();
      } else {
        unmountGiscus();
      }
    }

    document.addEventListener("DOMContentLoaded", apply);
    window.addEventListener("consent:changed", onConsentEvent);
    window.addEventListener("consent:updated", onConsentEvent);
  })();
</script>
