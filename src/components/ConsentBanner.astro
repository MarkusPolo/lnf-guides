---
/**
 * DSGVO-Consent Banner + UI
 * - Globale API: window.consent (get/set/setAll/decided)
 * - Globale UI:  window.consentUI.open(mode), window.consentUI.close()
 * - Trigger:     Klick auf [data-privacy-open] öffnet Einstellungen
 */

const STORAGE_KEY = 'lnf-consent-v1';
const POLICY_VERSION = 1;
---

<div
  id="consent-root"
  class="fixed inset-0 z-[2000] hidden"
  data-storage-key={STORAGE_KEY}
  data-policy-version={String(POLICY_VERSION)}
  aria-hidden="true"
>
  <!-- Backdrop -->
  <div class="absolute inset-0 bg-black/70"></div>

  <!-- Panel (Banner/Einstellungen) -->
  <div class="relative z-[1] mx-auto mt-16 w-[min(680px,calc(100%-2rem))] rounded-card border border-border/60 bg-[#111624] shadow-soft">
    <!-- Banner-Ansicht -->
    <div id="consent-banner" class="p-4 md:p-5">
      <h2 class="text-xl font-semibold mb-2">Privacy Preferences</h2>
      <p class="text-sm text-text2">
        We use cookies and similar technologies to provide essential functionality. With your consent, we also use analytics and embed external media (e.g., YouTube, Giscus). You can change your preferences anytime.
      </p>
      <div class="mt-4 flex flex-col md:flex-row gap-3">
        <button id="btn-accept-all" class="btn btn-primary md:w-auto w-full">Accept all</button>
        <button id="btn-reject-non" class="btn btn-outline md:w-auto w-full">Reject non-essential</button>
        <button id="btn-open-settings" class="btn btn-outline md:ml-auto md:w-auto w-full">Customize</button>
      </div>
    </div>

    <!-- Einstellungen -->
    <div id="consent-settings" class="hidden p-4 md:p-5 border-t border-border/60">
      <h3 class="text-lg font-semibold mb-3">Customize preferences</h3>

      <div class="space-y-2 mb-4">
        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <div class="font-semibold">Essential</div>
            <div class="text-sm text-text2">Required for basic functionality. Always on.</div>
          </div>
          <input type="checkbox" checked disabled class="opacity-50" />
        </div>

        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-analytics" class="font-semibold cursor-pointer">Analytics</label>
            <div class="text-sm text-text2">Anonymous usage statistics to improve the site.</div>
          </div>
          <input id="c-analytics" type="checkbox" class="cursor-pointer" />
        </div>

        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-external" class="font-semibold cursor-pointer">External embeds</label>
            <div class="text-sm text-text2">Loads external media (YouTube, Giscus, etc.).</div>
          </div>
          <input id="c-external" type="checkbox" class="cursor-pointer" />
        </div>

        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-ads" class="font-semibold cursor-pointer">Ads (non-personalized by default)</label>
            <div class="text-sm text-text2">Allows loading ad slots. Personalization only with consent.</div>
          </div>
          <input id="c-ads" type="checkbox" class="cursor-pointer" />
        </div>
      </div>

      <div class="flex items-center justify-between">
        <button id="btn-back" class="btn btn-outline">Back</button>
        <div class="flex gap-3">
          <button id="btn-save" class="btn btn-primary">Save choices</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  (function () {
    const root = document.getElementById('consent-root');
    if (!root) return;

    const storageKey = root.getAttribute('data-storage-key') || 'lnf-consent-v1';
    const policyVersion = Number(root.getAttribute('data-policy-version') || '1');

    // ---------- storage helpers ----------
    const defaults = () => ({
      version: 1,
      policyVersion,
      ts: 0,
      decisions: { analytics: false, external: false, ads: false }
    });

    function read() {
      try {
        const raw = localStorage.getItem(storageKey);
        if (!raw) return defaults();
        const parsed = JSON.parse(raw);
        // simple shape guard
        if (!parsed || typeof parsed !== 'object' || !parsed.decisions) return defaults();
        return {
          version: 1,
          policyVersion: parsed.policyVersion || policyVersion,
          ts: parsed.ts || 0,
          decisions: {
            analytics: !!parsed.decisions.analytics,
            external:  !!parsed.decisions.external,
            ads:       !!parsed.decisions.ads,
          }
        };
      } catch {
        return defaults();
      }
    }

    function write(state) {
      localStorage.setItem(storageKey, JSON.stringify(state));
      // Event für Embeds & Skripte
      window.dispatchEvent(new CustomEvent('consent:changed', { detail: state.decisions }));
    }

    function decided() {
      const s = read();
      return !!s.ts && s.policyVersion === policyVersion;
    }

    function set(partial) {
      const s = read();
      const updated = {
        ...s,
        policyVersion,
        ts: Date.now(),
        decisions: { ...s.decisions, ...partial }
      };
      write(updated);
      return updated;
    }

    function setAll(value) {
      const updated = {
        version: 1,
        policyVersion,
        ts: Date.now(),
        decisions: { analytics: !!value, external: !!value, ads: !!value }
      };
      write(updated);
      return updated;
    }

    // ---------- expose global API ----------
    if (!window.consent) {
      window.consent = {
        get: () => read().decisions,
        set,
        setAll,
        decided,
        KEY: storageKey,
        version: 1,
        policyVersion
      };
    }

    // ---------- UI controls ----------
    const banner = document.getElementById('consent-banner');
    const settings = document.getElementById('consent-settings');

    const btnAcceptAll   = document.getElementById('btn-accept-all');
    const btnRejectNon   = document.getElementById('btn-reject-non');
    const btnOpenSettings= document.getElementById('btn-open-settings');
    const btnBack        = document.getElementById('btn-back');
    const btnSave        = document.getElementById('btn-save');

    const cAnalytics = document.getElementById('c-analytics');
    const cExternal  = document.getElementById('c-external');
    const cAds       = document.getElementById('c-ads');

    function showRoot() {
      root.classList.remove('hidden');
      root.setAttribute('aria-hidden', 'false');
      document.documentElement.style.overflow = 'hidden';
    }
    function hideRoot() {
      root.classList.add('hidden');
      root.setAttribute('aria-hidden', 'true');
      document.documentElement.style.overflow = '';
    }
    function showBanner() {
      banner?.classList.remove('hidden');
      settings?.classList.add('hidden');
      showRoot();
    }
    function showSettings() {
      settings?.classList.remove('hidden');
      banner?.classList.add('hidden');
      showRoot();
    }
    function fillSettingsFromState() {
      const s = read();
      if (cAnalytics) cAnalytics.checked = !!s.decisions.analytics;
      if (cExternal)  cExternal.checked  = !!s.decisions.external;
      if (cAds)       cAds.checked       = !!s.decisions.ads;
    }

    // Buttons
    btnAcceptAll?.addEventListener('click', () => {
      setAll(true);
      hideRoot();
    });

    btnRejectNon?.addEventListener('click', () => {
      // nur essential an, alles andere aus
      set({ analytics: false, external: false, ads: false });
      hideRoot();
    });

    btnOpenSettings?.addEventListener('click', () => {
      fillSettingsFromState();
      showSettings();
    });

    btnBack?.addEventListener('click', () => {
      showBanner();
    });

    btnSave?.addEventListener('click', () => {
      set({
        analytics: !!(cAnalytics && cAnalytics.checked),
        external:  !!(cExternal  && cExternal.checked),
        ads:       !!(cAds       && cAds.checked),
      });
      hideRoot();
    });

    // Klicken auf Backdrop -> schließen (nur Settings; Banner bleibt beim Erstbesuch sichtbar)
    root.addEventListener('click', (e) => {
      if (e.target === root) {
        if (decided()) hideRoot();
      }
    });

    // Globale UI-API (auch für manuelles Reopen)
    window.consentUI = {
      open: (mode) => {
        if (mode === 'settings') {
          fillSettingsFromState();
          showSettings();
        } else {
          // Standard: Banner, außer es gibt bereits eine Entscheidung -> dann settings
          if (decided()) {
            fillSettingsFromState();
            showSettings();
          } else {
            showBanner();
          }
        }
      },
      close: hideRoot
    };

    // Bequemer Alias
    window.managePrivacy = () => window.consentUI.open('settings');

    // Delegation: beliebiges Element mit [data-privacy-open] öffnet UI
    document.addEventListener('click', (ev) => {
      const trigger = (ev.target && (ev.target.closest?.('[data-privacy-open]')));
      if (trigger) {
        ev.preventDefault();
        window.consentUI.open('settings');
      }
    });

    // Beim ersten Besuch Banner zeigen, sonst versteckt bleiben
    if (!decided()) {
      showBanner();
    }
  })();
</script>
