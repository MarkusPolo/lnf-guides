---
/**
 * Consent Banner mit Key-Migration + sofortigem Consent-Mode-Sync
 * - Kanonischer STORAGE_KEY: 'lnf-consent-1'
 * - Liest alte Keys ('lnf-consent-v1', 'lnf-consent'), migriert beim Write
 * - Spiegelt gespeicherten Stand direkt in gtag Consent Mode v2
 */
const STORAGE_KEY = 'lnf-consent-1';         // <- NEU: Kanonisch
const ALT_KEYS = ['lnf-consent-v1','lnf-consent']; // <- Legacy
const POLICY_VERSION = 2;
---

<div
  id="consent-root"
  class="fixed inset-0 z-[2000] hidden"
  data-storage-key={STORAGE_KEY}
  data-policy-version={String(POLICY_VERSION)}
  aria-hidden="true"
>
  <div class="absolute inset-0 bg-black/70"></div>
  <div class="relative z-[1] mx-auto mt-16 w-[min(680px,calc(100%-2rem))] rounded-card border border-border/60 bg-[#111624] shadow-soft">
    <div id="consent-banner" class="p-4 md:p-5">
      <h2 class="text-xl font-semibold mb-2">Privacy Preferences</h2>
      <p class="text-sm text-text2">
        We use cookies and similar technologies to provide essential functionality. With your consent, we also use analytics, external embeds (e.g., YouTube, Giscus) and ads.
        You can change your preferences anytime.
      </p>
      <div class="mt-4 flex flex-col md:flex-row gap-3">
        <button id="btn-accept-all" class="btn btn-primary md:w-auto w-full">Accept all</button>
        <button id="btn-reject-non" class="btn btn-outline md:w-auto w-full">Reject non-essential</button>
        <button id="btn-open-settings" class="btn btn-outline md:ml-auto md:w-auto w-full">Customize</button>
      </div>
    </div>

    <div id="consent-settings" class="hidden p-4 md:p-5 border-t border-border/60">
      <h3 class="text-lg font-semibold mb-3">Customize preferences</h3>

      <div class="space-y-2 mb-4">
        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <div class="font-semibold">Essential</div>
            <div class="text-sm text-text2">Required for basic functionality. Always on.</div>
          </div>
          <input type="checkbox" checked disabled class="opacity-50" />
        </div>

        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-analytics" class="font-semibold cursor-pointer">Analytics</label>
            <div class="text-sm text-text2">Anonymous usage statistics (Plausible).</div>
          </div>
          <input id="c-analytics" type="checkbox" class="cursor-pointer" />
        </div>

        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-external" class="font-semibold cursor-pointer">External embeds</label>
            <div class="text-sm text-text2">Loads external media (YouTube, Giscus, etc.).</div>
          </div>
          <input id="c-external" type="checkbox" class="cursor-pointer" />
        </div>

        <div class="p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div class="flex items-start justify-between gap-3">
            <div>
              <label for="c-ads" class="font-semibold cursor-pointer">Ads</label>
              <div class="text-sm text-text2">Allows loading ad slots (non-personalized by default).</div>
            </div>
            <input id="c-ads" type="checkbox" class="cursor-pointer" />
          </div>

          <div class="mt-3 pl-6 border-l border-dashed border-border/60">
            <div class="flex items-start justify-between gap-3">
              <div>
                <label for="c-ads-p" class="font-semibold cursor-pointer">Personalized ads</label>
                <div class="text-sm text-text2">
                  Use your data to personalize ads (requires explicit consent; otherwise non-personalized ads are requested).
                </div>
              </div>
              <input id="c-ads-p" type="checkbox" class="cursor-pointer" />
            </div>
          </div>
        </div>
      </div>

      <div class="flex items-center justify-between">
        <button id="btn-back" class="btn btn-outline">Back</button>
        <div class="flex gap-3">
          <button id="btn-save" class="btn btn-primary">Save choices</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
(function () {
  const root = document.getElementById('consent-root');
  if (!root) return;

  const PRIMARY_KEY = root.getAttribute('data-storage-key') || 'lnf-consent-1';
  const ALT_KEYS = ['lnf-consent-v1','lnf-consent'];
  const policyVersion = Number(root.getAttribute('data-policy-version') || '2');
  const CONSENT_MAX_AGE_DAYS = 180; // 6 Monate (falls du 12 willst: 365)

  // ---------- Utils ----------
  const defaults = () => ({
    version: 2,
    policyVersion,
    ts: 0,
    decisions: { analytics: false, external: false, ads: false, adsPersonalized: false }
  });

  function readAny(){
    // 1) Primary
    try {
      const raw = localStorage.getItem(PRIMARY_KEY);
      if (raw) return JSON.parse(raw);
    } catch {}
    // 2) Legacy
    for (const k of ALT_KEYS) {
      try {
        const raw = localStorage.getItem(k);
        if (raw) return JSON.parse(raw);
      } catch {}
    }
    return defaults();
  }

  function normalize(p){
    const d = p?.decisions || {};
    return {
      version: Number(p?.version ?? 1),
      policyVersion: Number(p?.policyVersion ?? policyVersion),
      ts: Number(p?.ts ?? 0),
      decisions: {
        analytics: !!d.analytics,
        external:  !!d.external,
        ads:       !!d.ads,
        adsPersonalized: !!d.adsPersonalized
      }
    };
  }

  function isExpired(ts){
   if (!ts) return true;
   try {
     const ageDays = (Date.now() - Number(ts)) / (1000*60*60*24);
     return ageDays > CONSENT_MAX_AGE_DAYS;
   } catch { return true; }
 }

  function applyConsentMode(dec){
    try {
      gtag('consent', 'update', {
        analytics_storage: dec.analytics ? 'granted' : 'denied',
        ad_storage: dec.ads ? 'granted' : 'denied',
        ad_user_data: dec.adsPersonalized ? 'granted' : 'denied',
        ad_personalization: dec.adsPersonalized ? 'granted' : 'denied'
      });
    } catch(e){}
  }

  function dispatch(decisions){
    window.dispatchEvent(new CustomEvent('consent:changed', { detail: decisions }));
    window.dispatchEvent(new Event('consent:updated'));
  }

  function write(state){
    // Schreibe nur an den PRIMARY_KEY; optional: Legacy leeren
    localStorage.setItem(PRIMARY_KEY, JSON.stringify(state));
    try { for (const k of ALT_KEYS) localStorage.removeItem(k); } catch {}
    applyConsentMode(state.decisions);
    dispatch(state.decisions);
  }

  function decided(){
    const s = normalize(readAny());
    return !!s.ts && s.policyVersion === policyVersion && !isExpired(s.ts);
  }

  function set(partial){
    const s = normalize(readAny());
    const next = {
      ...s,
      version: 2,
      policyVersion,
      ts: Date.now(),
      decisions: { ...s.decisions, ...partial }
    };
    write(next);
    return next;
  }

  function setAll(value){
    const v = !!value;
    const next = {
      version: 2,
      policyVersion,
      ts: Date.now(),
      decisions: { analytics: v, external: v, ads: v, adsPersonalized: v }
    };
    write(next);
    return next;
  }

  // Globale API
  if (!window.consent) {
    window.consent = {
      KEY: PRIMARY_KEY,
      version: 2,
      policyVersion,
      get: () => normalize(readAny()).decisions,
      set,
      setAll,
      decided,
      open: (mode) => window.consentUI?.open(mode)
    };
  }

  // ---------- UI ----------
  const banner   = document.getElementById('consent-banner');
  const settings = document.getElementById('consent-settings');
  const btnAcceptAll = document.getElementById('btn-accept-all');
  const btnRejectNon = document.getElementById('btn-reject-non');
  const btnOpenSettings = document.getElementById('btn-open-settings');
  const btnBack  = document.getElementById('btn-back');
  const btnSave  = document.getElementById('btn-save');
  const cAnalytics = document.getElementById('c-analytics');
  const cExternal  = document.getElementById('c-external');
  const cAds       = document.getElementById('c-ads');
  const cAdsP      = document.getElementById('c-ads-p');

  function showRoot(){ root.classList.remove('hidden'); root.setAttribute('aria-hidden','false'); document.documentElement.style.overflow='hidden'; }
  function hideRoot(){ root.classList.add('hidden'); root.setAttribute('aria-hidden','true');  document.documentElement.style.overflow=''; }
  function showBanner(){ banner?.classList.remove('hidden'); settings?.classList.add('hidden'); showRoot(); }
  function showSettings(){ settings?.classList.remove('hidden'); banner?.classList.add('hidden'); showRoot(); }

  function syncPersonalizedDisabled(){
    const adsOn = !!(cAds && cAds.checked);
    if (cAdsP){ cAdsP.disabled = !adsOn; if (!adsOn) cAdsP.checked = false; }
  }

  function fillSettingsFromState(){
    const s = normalize(readAny());
    if (cAnalytics) cAnalytics.checked = !!s.decisions.analytics;
    if (cExternal)  cExternal.checked  = !!s.decisions.external;
    if (cAds)       cAds.checked       = !!s.decisions.ads;
    if (cAdsP)      cAdsP.checked      = !!s.decisions.adsPersonalized && !!s.decisions.ads;
    syncPersonalizedDisabled();
  }

  cAds?.addEventListener('change', syncPersonalizedDisabled);
  btnAcceptAll?.addEventListener('click', () => { setAll(true); hideRoot(); });
  btnRejectNon?.addEventListener('click', () => { set({ analytics:false, external:false, ads:false, adsPersonalized:false }); hideRoot(); });
  btnOpenSettings?.addEventListener('click', () => { fillSettingsFromState(); showSettings(); });
  btnBack?.addEventListener('click', () => { showBanner(); });
  btnSave?.addEventListener('click', () => {
    set({
      analytics: !!(cAnalytics && cAnalytics.checked),
      external:  !!(cExternal  && cExternal.checked),
      ads:       !!(cAds       && cAds.checked),
      adsPersonalized: !!(cAdsP && cAdsP.checked && cAds && cAds.checked)
    });
    hideRoot();
  });

  root.addEventListener('click', (e) => { if (e.target === root && decided()) hideRoot(); });

  window.consentUI = {
    open: (mode) => { if (mode === 'settings' || decided()) { fillSettingsFromState(); showSettings(); } else { showBanner(); } },
    close: hideRoot
  };

  // ---------- Sofort-Sync beim Seitenstart ----------
  (function initialSync(){
    const s = normalize(readAny());
    // Wenn abgelaufen: reset auf denied, Banner zeigen
    if (!decided()) {
      applyConsentMode({ analytics:false, ads:false, adsPersonalized:false });
      dispatch({ analytics:false, ads:false, adsPersonalized:false, external:false });
      showBanner();
      return;
    }
    // sonst gespeicherten Stand spiegeln
    applyConsentMode(s.decisions); // setzt __lnfConsentState via gtag-Hook
    dispatch({ ...s.decisions, external: !!JSON.parse(localStorage.getItem('lnf-external-embeds')||'false') });
    })();
})();
</script>
