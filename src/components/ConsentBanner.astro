---
/**
 * Consent Banner mit Funding Choices (Google CMP) Integration
 * - Kanonischer STORAGE_KEY: 'lnf-consent-1'
 * - Ads & Personalized Ads werden NICHT im eigenen Banner verwaltet,
 *   sondern ausschließlich über Funding Choices (TCF 2.2 + Consent Mode v2).
 * - Analytics & External embeds bleiben lokal steuerbar.
 * - Bridge: gtag('consent','update', ...) von Funding Choices → LS sync (ads, adsPersonalized).
 * - HINWEIS: Für Limited Ads laden wir den AdSense-Tag nun immer (siehe BaseLayout),
 *   Consent Mode/TCF entscheidet über PA/NPA/LTD.
 */
const STORAGE_KEY = 'lnf-consent-1';
const ALT_KEYS = ['lnf-consent-v1','lnf-consent'];
const POLICY_VERSION = 2;
---

<div
  id="consent-root"
  class="fixed inset-0 z-[2000] hidden"
  data-storage-key={STORAGE_KEY}
  data-policy-version={String(POLICY_VERSION)}
  role="dialog"
  aria-modal="true"
  aria-labelledby="consent-banner-title"
  aria-hidden="true"
>
  <div class="absolute inset-0 bg-black/70"></div>
  <div class="relative z-[1] mx-auto mt-16 w-[min(680px,calc(100%-2rem))] rounded-card border border-border/60 bg-[#111624] shadow-soft">
    <!-- Banner -->
    <div id="consent-banner" class="p-4 md:p-5">
      <h2 id="consent-banner-title" class="text-xl font-semibold mb-2">Privacy Preferences</h2>
      <p class="text-sm text-text2">
        We use cookies and similar technologies to provide essential functionality. With your consent, we also use analytics, external embeds (e.g., YouTube, Giscus) and ads.
        You can change your preferences anytime.
      </p>
      <div class="mt-4 flex flex-col md:flex-row gap-3">
        <button id="btn-accept-all" class="btn btn-primary md:w-auto w-full">Accept all</button>
        <button id="btn-reject-non" class="btn btn-outline md:w-auto w-full">Reject non-essential</button>
        <button id="btn-open-settings" class="btn btn-outline md:ml-auto md:w-auto w-full">Customize</button>
      </div>
    </div>

    <!-- Settings -->
    <div id="consent-settings" class="hidden p-4 md:p-5 border-t border-border/60">
      <h3 class="text-lg font-semibold mb-3">Customize preferences</h3>

      <div class="space-y-2 mb-4">
        <!-- Essential -->
        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <div class="font-semibold">Essential</div>
            <div class="text-sm text-text2">Required for basic functionality. Always on.</div>
          </div>
          <input type="checkbox" checked disabled class="opacity-50" />
        </div>

        <!-- Analytics -->
        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-analytics" class="font-semibold cursor-pointer">Analytics</label>
            <div class="text-sm text-text2">Anonymous usage statistics (Vercel Web Analytics).</div>
          </div>
          <input id="c-analytics" type="checkbox" class="cursor-pointer" />
        </div>

        <!-- External embeds -->
        <div class="flex items-start justify-between gap-3 p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div>
            <label for="c-external" class="font-semibold cursor-pointer">External embeds</label>
            <div class="text-sm text-text2">Loads external media (YouTube, Giscus, etc.).</div>
          </div>
          <input id="c-external" type="checkbox" class="cursor-pointer" />
        </div>

        <!-- Ads (managed by Google CMP) -->
        <div class="p-3 rounded-card border border-border/60 bg-[#0f1422]">
          <div class="flex items-start justify-between gap-3">
            <div>
              <div class="font-semibold">Ads</div>
              <div class="text-sm text-text2">
                Managed via <strong>Google Funding Choices (CMP)</strong>. Use the button below to review or change your ad consent.
              </div>
            </div>
            <button id="btn-open-gcmp" class="btn btn-outline">Open Google CMP</button>
          </div>

          <div class="mt-3 pl-6 border-l border-dashed border-border/60">
            <div class="flex items-start justify-between gap-3">
              <div>
                <div class="font-semibold">Personalized ads</div>
                <div class="text-sm text-text2">
                  Also managed via Google CMP. If not granted, non-personalized ads (NPA) or Limited Ads (LTD) will be requested automatically.
                </div>
              </div>
              <span id="ads-status" class="text-xs text-text2 px-2 py-1 border rounded-card">—</span>
            </div>
          </div>
        </div>
      </div>

      <div class="flex items-center justify-between">
        <button id="btn-back" class="btn btn-outline">Back</button>
        <div class="flex gap-3">
          <button id="btn-save" class="btn btn-primary">Save choices</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
(function () {
  const root = document.getElementById('consent-root');
  if (!root) return;

  const PRIMARY_KEY = root.getAttribute('data-storage-key') || 'lnf-consent-1';
  const ALT_KEYS = ['lnf-consent-v1','lnf-consent'];
  const policyVersion = Number(root.getAttribute('data-policy-version') || '2');
  const CONSENT_MAX_AGE_DAYS = 180;

  const defaults = () => ({
    version: 2,
    policyVersion,
    ts: 0,
    decisions: { analytics: false, external: false, ads: false, adsPersonalized: false }
  });

  function readAny(){
    try { const raw = localStorage.getItem(PRIMARY_KEY); if (raw) return JSON.parse(raw); } catch {}
    for (const k of ALT_KEYS) { try { const raw = localStorage.getItem(k); if (raw) return JSON.parse(raw); } catch {} }
    return defaults();
  }

  function normalize(p){
    const d = p?.decisions || {};
    return {
      version: Number(p?.version ?? 1),
      policyVersion: Number(p?.policyVersion ?? policyVersion),
      ts: Number(p?.ts ?? 0),
      decisions: {
        analytics: !!d.analytics,
        external:  !!d.external,
        ads:       !!d.ads,
        adsPersonalized: !!d.adsPersonalized
      }
    };
  }

  function write(state){
    localStorage.setItem(PRIMARY_KEY, JSON.stringify(state));
    try { for (const k of ALT_KEYS) localStorage.removeItem(k); } catch {}
    try {
      const dec = state.decisions;
      gtag('consent','update', {
        analytics_storage: dec.analytics ? 'granted' : 'denied',
        ad_storage: dec.ads ? 'granted' : 'denied',
        ad_user_data: dec.adsPersonalized ? 'granted' : 'denied',
        ad_personalization: dec.adsPersonalized ? 'granted' : 'denied'
      });
    } catch {}
    const detail = { ...state.decisions };
    window.dispatchEvent(new CustomEvent('consent:changed', { detail }));
    window.dispatchEvent(new Event('consent:updated'));
  }

  function set(partial){
    const s = normalize(readAny());
    const next = {
      ...s,
      version: 2,
      policyVersion,
      ts: Date.now(),
      decisions: { ...s.decisions, ...partial }
    };
    write(next);
    return next;
  }

  function decided(){
    const s = normalize(readAny());
    if (!s.ts) return false;
    const ageDays = (Date.now() - s.ts) / (1000*60*60*24);
    return s.policyVersion === policyVersion && ageDays <= CONSENT_MAX_AGE_DAYS;
  }

  const banner = document.getElementById('consent-banner');
  const settings = document.getElementById('consent-settings');
  const btnAcceptAll = document.getElementById('btn-accept-all');
  const btnRejectNon = document.getElementById('btn-reject-non');
  const btnOpenSettings = document.getElementById('btn-open-settings');
  const btnBack  = document.getElementById('btn-back');
  const btnSave  = document.getElementById('btn-save');
  const btnOpenGCMP = document.getElementById('btn-open-gcmp');
  const cAnalytics = document.getElementById('c-analytics');
  const cExternal  = document.getElementById('c-external');
  const adsStatus  = document.getElementById('ads-status');

  function showRoot(){ root.classList.remove('hidden'); root.setAttribute('aria-hidden','false'); document.documentElement.style.overflow='hidden'; }
  function hideRoot(){ root.classList.add('hidden'); root.setAttribute('aria-hidden','true');  document.documentElement.style.overflow=''; }
  function showBanner(){ banner?.classList.remove('hidden'); settings?.classList.add('hidden'); showRoot(); }
  function showSettings(){ settings?.classList.remove('hidden'); banner?.classList.add('hidden'); showRoot(); }

  function fillSettingsFromState(){
    const s = normalize(readAny());
    if (cAnalytics) cAnalytics.checked = !!s.decisions.analytics;
    if (cExternal)  cExternal.checked  = !!s.decisions.external;
    if (adsStatus)  adsStatus.textContent = s.decisions.ads
      ? (s.decisions.adsPersonalized ? 'Ads: Allowed • Personalized: On' : 'Ads: Allowed • Personalized: Off')
      : 'Ads: Disallowed';
  }

  function openGoogleCMP(){
    try { if (typeof __tcfapi === 'function') { __tcfapi('displayConsentUi', 2, function(){}); return; } } catch {}
    try { window.fundingChoices?.showConsentDialog?.(); return; } catch {}
    showSettings();
  }

  function syncAdsFromConsentMode(p){
    if (!p) return;
    const ads = p.ad_storage === 'granted';
    const personalized = (p.ad_user_data === 'granted') && (p.ad_personalization === 'granted');
    const s = normalize(readAny());
    if (s.decisions.ads !== ads || s.decisions.adsPersonalized !== personalized) {
      set({ ads, adsPersonalized: personalized });
    } else {
      fillSettingsFromState();
    }
  }

  (function hookGtag(){
    const prev = window.__lnf_onGtag;
    window.__lnf_onGtag = function(args){
      try { if (typeof prev === 'function') prev(args); } catch {}
      if (args && args[0] === 'consent' && args[1] === 'update') {
        syncAdsFromConsentMode(args[2] || {});
      }
    };
  })();

  btnAcceptAll?.addEventListener('click', () => {
    set({ analytics:true, external:true });
    openGoogleCMP();
    hideRoot();
  });

  btnRejectNon?.addEventListener('click', () => {
    set({ analytics:false, external:false, ads:false, adsPersonalized:false });
    openGoogleCMP();
    hideRoot();
  });

  btnOpenSettings?.addEventListener('click', () => { fillSettingsFromState(); showSettings(); });
  btnBack?.addEventListener('click', () => { showBanner(); });
  btnSave?.addEventListener('click', () => {
    set({
      analytics: !!(cAnalytics && cAnalytics.checked),
      external:  !!(cExternal  && cExternal.checked)
    });
    hideRoot();
  });

  btnOpenGCMP?.addEventListener('click', (e) => { e.preventDefault(); openGoogleCMP(); });

  root.addEventListener('click', (e) => { if (e.target === root && decided()) hideRoot(); });
  window.addEventListener('keydown', (e) => { if (e.key === 'Escape' && decided()) hideRoot(); });

  window.consentUI = {
    open: (mode) => {
      if (mode === 'ads') { openGoogleCMP(); return; }
      if (mode === 'settings' || decided()) { fillSettingsFromState(); showSettings(); }
      else { showBanner(); }
    },
    close: hideRoot
  };

  window.addEventListener('consent:open', () => { window.consentUI.open('settings'); });

  (function initialSync(){
    const s = normalize(readAny());
    try {
      const dec = s.decisions;
      gtag('consent','update', {
        analytics_storage: dec.analytics ? 'granted' : 'denied',
        ad_storage: dec.ads ? 'granted' : 'denied',
        ad_user_data: dec.adsPersonalized ? 'granted' : 'denied',
        ad_personalization: dec.adsPersonalized ? 'granted' : 'denied'
      });
    } catch {}
    fillSettingsFromState();
    if (!decided()) showBanner();
  })();

  document.addEventListener('click', (ev) => {
    const t = ev.target?.closest?.('[data-privacy-open]');
    if (t) { ev.preventDefault(); window.consentUI.open('settings'); }
  });
})();
</script>
