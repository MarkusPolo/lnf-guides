---
import "../styles/global.css";

type ArticleMeta = {
  published?: string;
  modified?: string;
  author?: string;
  section?: string;
  tags?: string[];
};

const {
  title,
  description,
  canonical,
  ogImage,
  type = "website",
  category,
  robots = "index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1",
  locale = "en_US",
  imageAlt,
  twitterSite,
  twitterCreator,
  article,
  /**
   * Optional: LCP-Preload-Konfiguration für das führende Bild der Seite.
   * Beispiel:
   * lcpPreload: {
   *   imagesrcset: "/images/hero-320.avif 320w, /images/hero-480.avif 480w, /images/hero-640.avif 640w",
   *   imagesizes: "(max-width: 640px) 94vw, 473px"
   * }
   */
  lcpPreload
}: {
  title?: string;
  description?: string;
  canonical?: string;
  ogImage?: string;
  type?: "website" | "article";
  category?: string;
  robots?: string;
  locale?: string;
  imageAlt?: string;
  twitterSite?: string;
  twitterCreator?: string;
  article?: ArticleMeta;
  lcpPreload?: { imagesrcset: string; imagesizes?: string };
} = Astro.props as any;

const site = Astro.site?.origin ?? "https://www.lnfguides.com";
const url = canonical ?? new URL(Astro.url.pathname, site);
const siteUrl = String(Astro.site ?? site);

// OG-Fallback
const ogFallbackByCategory: Record<string, string> = {
  dragons: "/images/og/dragons.png",
  beginners: "/images/og/beginners.png",
};
const rawOg = ogImage || ogFallbackByCategory[category ?? ""] || "/images/og/default.png";

// absolute Bild-URL erzwingen
function toAbs(u?: string) {
  try {
    if (!u) return undefined;
    if (/^https?:\/\//i.test(u)) return u;
    return new URL(u, siteUrl).toString();
  } catch { return u; }
}
const finalOgAbs = toAbs(rawOg);

// IDs
const FC_PUBLISHER_ID = "pub-6618488631609364";
const ADSENSE_CLIENT = "ca-pub-6618488631609364";
---

<html lang="en" class="dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
    <link rel="canonical" href={String(url)} />
    <meta name="google-adsense-account" content={ADSENSE_CLIENT} />
    <meta name="robots" content={robots} />

    <title>{title ?? "LNF Guides"}</title>
    <meta name="description" content={description ?? "Guides & News"} />

    <!-- Open Graph -->
    <meta property="og:type" content={type} />
    <meta property="og:site_name" content="LNF Guides" />
    <meta property="og:locale" content={locale} />
    <meta property="og:title" content={title ?? "LNF Guides"} />
    <meta property="og:description" content={description ?? "Guides & News"} />
    <meta property="og:url" content={String(url)} />
    <meta property="og:image" content={finalOgAbs} />
    <meta property="og:image:secure_url" content={finalOgAbs} />
    <meta property="og:image:alt" content={imageAlt ?? title ?? "LNF Guides"} />

    {type === "article" && article && (
      <>
        {article.published && <meta property="article:published_time" content={article.published} />}
        {article.modified && <meta property="article:modified_time" content={article.modified} />}
        {article.author && <meta property="article:author" content={article.author} />}
        {article.section && <meta property="article:section" content={article.section} />}
        {Array.isArray(article.tags) && article.tags.map((t) => (
          <meta property="article:tag" content={t} />
        ))}
      </>
    )}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title ?? "LNF Guides"} />
    <meta name="twitter:description" content={description ?? "Guides & News"} />
    <meta name="twitter:image" content={finalOgAbs} />
    {imageAlt && <meta name="twitter:image:alt" content={imageAlt} />}
    {twitterSite && <meta name="twitter:site" content={twitterSite} />}
    {twitterCreator && <meta name="twitter:creator" content={twitterCreator} />}

    <!-- Icons / Manifest -->
    <link rel="icon" href="/images/logo.svg" type="image/svg+xml" />
    <link rel="icon" href="/favicon-32x32.png" sizes="32x32" type="image/png" />
    <link rel="icon" href="/favicon-192x192.png" sizes="192x192" type="image/png" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link id="site-manifest" rel="manifest" href="/site.webmanifest" />

    <!-- LCP: optionales Preload (nur wenn lcpPreload gesetzt) -->
    {lcpPreload && (
      <link
        rel="preload"
        as="image"
        imagesrcset={lcpPreload.imagesrcset}
        imagesizes={lcpPreload.imagesizes ?? "(max-width: 640px) 94vw, 473px"}
        fetchpriority="high"
      />
    )}

    <!-- Styles: Haupt-CSS non-blocking via preload+swap -->
    <link rel="preload" as="style" href="/_astro/_slug_.Du0I1rql.css" onload="this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="/_astro/_slug_.Du0I1rql.css"></noscript>

    <!-- KEINE preconnects ohne Consent!
         Wir injizieren preconnects dynamisch nach Opt-in (siehe unten). -->

    <!-- JSON-LD: WebSite -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "WebSite",
        url: siteUrl,
        name: "LNF Guides",
        potentialAction: {
          "@type": "SearchAction",
          target: `${siteUrl}search?q={query}`,
          "query-input": "required name=query"
        }
      })} />

    <!-- JSON-LD: Organization -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Organization",
        name: "LNF Guides",
        url: siteUrl,
        logo: `${siteUrl}images/logo.svg`,
        sameAs: ["https://github.com/lnf-guides"]
      })} />

    <!-- FC present iframe (vor FC-Skript) -->
    <script>
      (function ensureGooglefcPresent(){
        function inject(){
          try{
            if (!window.frames || window.frames['googlefcPresent']) return;
            var f=document.createElement('iframe');
            f.name='googlefcPresent';
            f.style='width:0;height:0;border:0;display:none';
            (document.body||document.documentElement).appendChild(f);
          }catch(e){}
        }
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', inject, {once:true});
        } else {
          inject();
        }
      })();
    </script>

    <!-- Consent Mode v2 (Default = denied) -->
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){ dataLayer.push(arguments); }
      gtag('consent', 'default', {
        ad_storage: 'denied',
        ad_user_data: 'denied',
        ad_personalization: 'denied',
        analytics_storage: 'denied',
        wait_for_update: 500
      });
    </script>

    <!-- gtag-Proxy: beobachte consent updates -->
    <script>
      (function(){
        var _gtag = window.gtag;
        window.gtag = function(){
          try {
            if (arguments && arguments[0] === 'consent' && arguments[1] === 'update') {
              try { window.__lnf_onGtag && window.__lnf_onGtag(arguments); } catch(e){}
            }
          } catch(e){}
          return _gtag && _gtag.apply(this, arguments);
        };
      })();
    </script>

    <!-- Funding Choices (CMP) – darf vor Consent geladen werden -->
    <script async src={"https://fundingchoicesmessages.google.com/i/" + FC_PUBLISHER_ID + "?ers=1"}></script>

    <!-- Preconnect/Loader-Helfer (nur nach Consent nutzen) -->
    <script>
      (function(){
        const added = new Set();
        const LIMIT = 4;

        function originOf(url){
          try{ const u = new URL(url, location.origin); return u.origin; }catch(e){ return null; }
        }

        function addPreconnectJustInTime(url){
          try{
            const org = originOf(url);
            if (!org || added.has(org) || added.size >= LIMIT) return;
            const l = document.createElement('link');
            l.rel = 'preconnect';
            l.href = org + '/';
            if (org.startsWith('https://')) l.crossOrigin = 'anonymous';
            document.head.appendChild(l);
            added.add(org);
          }catch(e){}
        }

        window.__LNF_loadStyle = function(href, id){
          try {
            addPreconnectJustInTime(href);
            if (id && document.getElementById(id)) return;
            const l = document.createElement('link');
            l.rel = 'preload';
            l.as = 'style';
            l.href = href;
            if (id) l.id = id + '-preload';
            l.onload = function(){ this.rel='stylesheet'; this.onload=null; };
            document.head.appendChild(l);
            const no = document.createElement('noscript');
            no.innerHTML = '<link rel="stylesheet" href="'+href+'">';
            document.head.appendChild(no);
          }catch(e){}
        };

        window.__LNF_loadScript = function(src, opts){
          try {
            addPreconnectJustInTime(src);
            const s = document.createElement('script');
            s.src = src;
            if (opts && opts.async) s.async = true;
            if (opts && opts.defer) s.defer = true;
            if (opts && opts.id) s.id = opts.id;
            if (opts && opts.crossorigin) s.crossOrigin = 'anonymous';
            document.head.appendChild(s);
          }catch(e){}
        };

        window.__LNF_preconnect = function(url){ addPreconnectJustInTime(url); };
      })();
    </script>

    <!-- TCF Bridge: einzige Consent-Quelle & CMP-UI -->
    <script>
      (function(){
        var state = { analytics:false, ads:false, adsPersonalized:false, external:false };

        function deriveBooleans(tc){
          var p = (tc && tc.purpose) || {};
          var cons = p.consents || {};
          var li   = p.legitimateInterests || {};
          var analyticsAllowed = !!(cons['7'] || li['7']);   // Purpose 7: Ad performance measurement
          var adsAllowed       = !!cons['2'];                // Purpose 2: Basic Ads
          var personalized     = !!(cons['3'] && cons['4']); // Profil + Auswahl
          var externalAllowed  = !!(cons['1']);              // Purpose 1: Store/Access
          return {
            analytics: analyticsAllowed,
            ads: adsAllowed,
            adsPersonalized: adsAllowed && personalized,
            external: externalAllowed
          };
        }

        function pushGtagConsent(s){
          try {
            gtag('consent','update', {
              analytics_storage:   s.analytics ? 'granted' : 'denied',
              ad_storage:          s.ads ? 'granted' : 'denied',
              ad_user_data:        s.adsPersonalized ? 'granted' : 'denied',
              ad_personalization:  s.adsPersonalized ? 'granted' : 'denied'
            });
            try { window.__lnf_onGtag && window.__lnf_onGtag(['consent','update', {
              analytics_storage:   s.analytics ? 'granted' : 'denied',
              ad_storage:          s.ads ? 'granted' : 'denied',
              ad_user_data:        s.adsPersonalized ? 'granted' : 'denied',
              ad_personalization:  s.adsPersonalized ? 'granted' : 'denied'
            }]); } catch(e){}
          } catch(e){}
          try {
            window.dispatchEvent(new CustomEvent('consent:changed', { detail: s }));
            window.dispatchEvent(new Event('consent:updated'));
          } catch(e){}
        }

        function subscribeTCF(){
          if (typeof __tcfapi !== 'function') return false;
          __tcfapi('addEventListener', 2, function(tcData, success){
            if (!success || !tcData || !tcData.tcString) return;
            var next = deriveBooleans(tcData);
            var changed = next.analytics !== state.analytics ||
                          next.ads !== state.ads ||
                          next.adsPersonalized !== state.adsPersonalized ||
                          next.external !== state.external;
            state = next;
            if (changed) pushGtagConsent(state);
          });
          return true;
        }

        var got = subscribeTCF();
        if (!got) {
          document.addEventListener('DOMContentLoaded', function(){ subscribeTCF(); }, { once:true });
        }

        window.lnfConsent = {
          get: function(){ return { ...state }; },
          allowed: function(key){ return !!state[key]; },
          on: function(fn){
            if (typeof fn !== 'function') return;
            window.addEventListener('consent:changed', function(ev){ fn(ev.detail || { ...state }); });
          }
        };

        function openCMP(){
          try { if (typeof __tcfapi === 'function') { __tcfapi('displayConsentUi', 2, function(){}); return; } } catch(e){}
          try {
            window.googlefc = window.googlefc || {};
            window.googlefc.callbackQueue = window.googlefc.callbackQueue || [];
            window.googlefc.callbackQueue.push(function(){
              if (typeof googlefc.showRevocationMessage === 'function') {
                googlefc.showRevocationMessage();
              }
            });
          } catch(e){}
        }
        window.openPrivacy = openCMP;

        document.addEventListener('click', function(ev){
          var t = ev.target && ev.target.closest && ev.target.closest('[data-privacy-open]');
          if (!t) return;
          ev.preventDefault();
          openCMP();
        });
      })();
    </script>

    <!-- AdSense: IMMER laden (PA/NPA/LTD via Consent Mode/TCF) – keine preconnects vor Consent -->
    <script
      async
      src={"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=" + ADSENSE_CLIENT}
      crossOrigin="anonymous"
    ></script>
  </head>

  <body class="font-sans bg-bg text-text overflow-x-hidden">
    <a
      href="#content"
      class="sr-only focus:not-sr-only focus:fixed focus:left-[max(1rem,env(safe-area-inset-left))] focus:top-4 focus:bg-surface focus:px-3 focus:py-2 focus:rounded"
    >Skip to content</a>

    <header
      class="sticky top-0 z-[1000] isolate border-b border-border/60 bg-bg/95 backdrop-blur supports-[backdrop-filter]:bg-bg/70"
    >
      <div class="mx-auto max-w-7xl px-4 sm:px-5 py-3 flex items-center gap-4 min-w-0">
        <a href="/" class="flex items-center gap-2 shrink-0">
          <img src="/images/logo.svg" alt="LNF Guides" class="h-7 w-7" />
        <span class="text-lg font-extrabold tracking-tight">LNF Guides</span>
        </a>

        <div class="flex-1 max-w-xl mx-auto hidden md:block min-w-0">
          <button
            id="open-search"
            class="w-full truncate text-left border border-border/60 rounded-full px-4 py-2 text-text2 hover:bg-surface"
            aria-label="Open search (Cmd/Ctrl+K)"
            type="button"
          >Press ⌘/Ctrl K to search…</button>
        </div>

        <nav class="flex items-center gap-3 flex-wrap text-sm">
          <a href="/guides/" class="hover:underline">Guides</a>
          <a href="/news/" class="hover:underline">News</a>
          <a href="/updates/" class="hover:underline">Updates</a>
          <a href="/about/" class="hover:underline">About</a>
          <a href="/contact/" class="btn btn-primary">Subscribe</a>
          <button
            class="underline hover:text-text"
            data-privacy-open
            type="button"
            role="button"
            aria-label="Privacy settings"
          >Privacy settings</button>
        </nav>
      </div>
    </header>

    <slot name="search" />
    <main id="content" class="w-full overflow-x-hidden">
      <slot />
    </main>

    <footer class="mt-16 border-t border-border/60">
      <div class="mx-auto max-w-7xl px-4 sm:px-5 py-12 grid gap-8 md:grid-cols-4 text-sm">
        <section>
          <h3 class="font-semibold mb-3">Site</h3>
          <ul class="space-y-2">
            <li><a href="/">Home</a></li>
            <li><a href="/guides/">Guides</a></li>
            <li><a href="/news/">News</a></li>
            <li><a href="/updates/">Updates</a></li>
          </ul>
        </section>
        <section>
          <h3 class="font-semibold mb-3">Legal</h3>
          <ul class="space-y-2">
            <li><a href="/privacy/">Privacy</a></li>
            <li><a href="/contact/">Contact</a></li>
            <li><a href="/legalnotice/">Legal Notice</a></li>
            <li><a href="/impressum/">Legal Notice (DE) / Impressum</a></li>
          </ul>
        </section>
        <section class="md:col-span-2">
          <h3 class="text-sm font-semibold mb-3">Controls</h3>
          <button class="underline" data-privacy-open type="button">
            Privacy settings
          </button>
        </section>
      </div>
      <div class="mx-auto max-w-7xl px-4 sm:px-5 pb-10 text-xs text-text2">
        Unofficial fan site. Not affiliated with Hello Games.
      </div>
    </footer>

    <!-- Search trigger -->
    <script>
      document.getElementById('open-search')?.addEventListener('click', () =>
        window.dispatchEvent(new KeyboardEvent('keydown', { key: 'k', ctrlKey: true }))
      );
    </script>

    <!-- Vercel Analytics: nur bei Opt-in (Analytics) -->
    <script>
      (function(){
        var loaded = false;
        window.va = window.va || function(){ (window.vaq = window.vaq || []).push(arguments); };
        function allowed(){ try { return !!(window.lnfConsent && window.lnfConsent.allowed('analytics')); } catch(e){ return false; } }
        function load(){
          if (loaded || !allowed()) return;
          loaded = true;
          var s = document.createElement('script');
          s.defer = true;
          s.src = '/_vercel/insights/script.js';
          s.id = 'vercel-analytics-script';
          document.head.appendChild(s);
        }
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', function(){ if (allowed()) load(); }, { once:true });
        } else {
          Promise.resolve().then(function(){ if (allowed()) load(); });
        }
        try { window.lnfConsent && window.lnfConsent.on(function(d){ if (d && d.analytics) load(); }); } catch(e){}
        window.addEventListener('consent:changed', function(ev){ if (ev?.detail?.analytics) load(); }, { passive: true });
      })();
    </script>
  </body>
</html>
