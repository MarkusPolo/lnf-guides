---
import "../styles/global.css";
import ConsentBanner from "../components/ConsentBanner.astro";

const {
  title,
  description,
  canonical,
  ogImage,
  type = "website",
  category,
} = Astro.props as any;

const site = Astro.site?.origin ?? "https://www.lnfguides.com";
const url = canonical ?? new URL(Astro.url.pathname, site);
const siteUrl = String(Astro.site ?? site);

// OG-Fallback
const ogFallbackByCategory: Record<string, string> = {
  dragons: "/images/og/dragons.png",
  beginners: "/images/og/beginners.png",
};
const finalOg =
  ogImage || ogFallbackByCategory[category] || "/images/og/default.png";

// IDs – prüfe beide
const FC_PUBLISHER_ID = "pub-6618488631609364";
const ADSENSE_CLIENT = "ca-pub-6618488631609364";
---

<html lang="en" class="dark">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1,viewport-fit=cover"
    />
    <link rel="canonical" href={String(url)} />
    <meta name="google-adsense-account" content={ADSENSE_CLIENT} />

    <title>{title ?? "LNF Guides"}</title>
    <meta name="description" content={description ?? "Guides & News"} />
    <meta property="og:type" content={type} />
    <meta property="og:title" content={title ?? "LNF Guides"} />
    <meta property="og:description" content={description ?? "Guides & News"} />
    <meta property="og:url" content={String(url)} />
    <meta property="og:image" content={finalOg} />
    <meta property="og:site_name" content="LNF Guides" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title ?? "LNF Guides"} />
    <meta name="twitter:description" content={description ?? "Guides & News"} />
    <meta name="twitter:image" content={finalOg} />
    <link rel="icon" href="/images/logo.svg" type="image/svg+xml" />

    <!-- FC present iframe: muss vor FC-Skript garantiert existieren -->
    <script>
      (function ensureGooglefcPresent(){
        function inject(){
          try{
            if (!window.frames || window.frames['googlefcPresent']) return;
            var f=document.createElement('iframe');
            f.name='googlefcPresent';
            f.style='width:0;height:0;border:0;display:none';
            document.body ? document.body.appendChild(f)
                          : document.addEventListener('DOMContentLoaded', function(){ 
                              try{ document.body.appendChild(f); }catch(e){}
                            }, {once:true});
          }catch(e){}
        }
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', inject, {once:true});
        } else {
          inject();
        }
      })();
    </script>

    <!-- JSON-LD: WebSite -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "WebSite",
        url: siteUrl,
        name: "LNF Guides",
        potentialAction: {
          "@type": "SearchAction",
          target: `${siteUrl}/search?q={query}`,
          "query-input": "required name=query"
        }
      })}
    />

    <!-- JSON-LD: Organization -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Organization",
        name: "LNF Guides",
        url: siteUrl,
        logo: `${siteUrl}/images/logo.svg`,
        sameAs: ["https://github.com/lnf-guides"]
      })}
    />

    <!-- Consent Mode v2 (Default = denied) -->
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){ dataLayer.push(arguments); }
      gtag('consent', 'default', {
        ad_storage: 'denied',
        ad_user_data: 'denied',
        ad_personalization: 'denied',
        analytics_storage: 'denied',
        wait_for_update: 500
      });
    </script>

    <!-- gtag-Proxy: leitet consent updates an den ConsentBanner-Hook -->
    <script>
      (function(){
        var _gtag = window.gtag;
        window.gtag = function(){
          try {
            if (arguments && arguments[0] === 'consent' && arguments[1] === 'update') {
              try { window.__lnf_onGtag && window.__lnf_onGtag(arguments); } catch(e){}
            }
          } catch(e){}
          return _gtag && _gtag.apply(this, arguments);
        };
      })();
    </script>

    <!-- Funding Choices (CMP) -->
    <script async src={"https://fundingchoicesmessages.google.com/i/" + FC_PUBLISHER_ID + "?ers=1"}></script>
    <script>
      // googlefcPresent-iframe sicher erzeugen (falls FC-Script race conditions hat)
      (function signalGooglefcPresent() {
        function inject(){
          try{
            if (!window.frames['googlefcPresent']) {
              const iframe = document.createElement('iframe');
              iframe.style = 'width:0;height:0;border:0;display:none';
              iframe.name = 'googlefcPresent';
              document.body.appendChild(iframe);
            }
          }catch(e){}
        }
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', inject, { once:true });
          window.addEventListener('load', inject, { once:true });
        } else {
          inject();
        }
      })();
    </script>

    <script>
      // Erzwinge FC-Dialog nach Page-Load, sobald __tcfapi bereit ist.
      (function forceFC(){
        var started = Date.now();
        var tm = setInterval(function(){
          if (typeof __tcfapi === 'function') {
            try { __tcfapi('displayConsentUi', 2, function(){}); } catch(e){}
            clearInterval(tm);
          } else if (Date.now() - started > 15000) { // 15s Timeout
            clearInterval(tm);
            console.warn('FC: __tcfapi nicht verfügbar (Timeout).');
          }
        }, 250);
      })();
    </script>

    <!-- LNF Consent Bridge (für Analytics/Embeds) -->
    <script>
      (function(){
        var LS_KEYS = ['lnf-consent-1','lnf-consent-v1','lnf-consent'];
        function readAny(){
          for (var i=0;i<LS_KEYS.length;i++){
            try{ var raw = localStorage.getItem(LS_KEYS[i]); if (raw) return JSON.parse(raw); }catch(e){}
          }
          return null;
        }
        function getDecisions(){
          try{
            var via = window.consent && typeof window.consent.get==='function' ? window.consent.get() : null;
            if (via && (via.analytics!==undefined || via.external!==undefined || via.ads!==undefined)) return {
              analytics: !!via.analytics, external: !!via.external, ads: !!via.ads, adsPersonalized: !!via.adsPersonalized
            };
          }catch(e){}
          var rec = readAny();
          var d = rec && rec.decisions ? rec.decisions : null;
          if (d) return {
            analytics: !!d.analytics, external: !!d.external, ads: !!d.ads, adsPersonalized: !!d.adsPersonalized
          };
          return { analytics:false, external:false, ads:false, adsPersonalized:false };
        }
        var listeners = new Set();
        function emit(){
          var d = getDecisions();
          listeners.forEach(function(fn){ try{ fn(d); }catch(e){} });
          try {
            window.dispatchEvent(new CustomEvent('consent:changed', { detail: d })); 
            window.dispatchEvent(new Event('consent:updated'));
          } catch(e){}
        }
        window.lnfConsent = {
          get: getDecisions,
          allowed: function(key){ var d=getDecisions(); return !!d[key]; },
          on: function(cb){ if (typeof cb==='function'){ listeners.add(cb); } },
          off: function(cb){ listeners.delete(cb); }
        };
        window.addEventListener('storage', function(ev){
          if (!ev || !ev.key) return;
          if (LS_KEYS.includes(ev.key)) emit();
        });
        emit();
      })();
    </script>

    <!-- Vercel Web Analytics: nur bei Opt-in -->
    <script id="vercel-analytics-loader">
      (function(){
        var loaded = false;
        window.va = window.va || function(){ (window.vaq = window.vaq || []).push(arguments); };
        function allowed(){ try { return !!(window.lnfConsent && window.lnfConsent.allowed('analytics')); } catch(e){ return false; } }
        function load(){
          if (loaded || !allowed()) return;
          loaded = true;
          var s = document.createElement('script');
          s.defer = true;
          s.src = '/_vercel/insights/script.js';
          s.id = 'vercel-analytics-script';
          document.head.appendChild(s);
        }
        if (allowed()) load();
        try { window.lnfConsent && window.lnfConsent.on(function(d){ if (d && d.analytics) load(); }); } catch(e){}
        window.addEventListener('consent:changed', function(ev){ if (ev?.detail?.analytics) load(); }, { passive: true });
        document.readyState === 'loading'
          ? document.addEventListener('DOMContentLoaded', function(){ if (allowed()) load(); }, { once:true })
          : Promise.resolve().then(function(){ if (allowed()) load(); });
      })();
    </script>

    <!-- AdSense: IMMER laden (PA/NPA/LTD via Consent Mode + TCF-String) -->
    <script
      async
      src={"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=" + ADSENSE_CLIENT}
      crossOrigin="anonymous"
    ></script>
    <script>
      (function(){
        var OPEN_TIMEOUT_MS = 8000; 
        function openLocal(){ try{ window.consentUI?.open('settings'); }catch(e){} }

        function tryFC(cb){
          try {
            window.googlefc = window.googlefc || {};
            window.googlefc.callbackQueue = window.googlefc.callbackQueue || [];
            window.googlefc.callbackQueue.push(function(){
              try{
                if (typeof googlefc.showRevocationMessage === 'function') {
                  googlefc.showRevocationMessage();
                  cb(true); return;
                }
              }catch(e){}
              cb(false);
            });
          } catch(e){ cb(false); }
        }

        function tryTCF(cb){
          try{
            if (typeof __tcfapi === 'function') {
              __tcfapi('getTCData', 2, function(data, success){
                if (success && data && data.tcString && data.tcString.length > 10) {
                  cb(true);
                } else {
                  try { __tcfapi('displayConsentUi', 2, function(){}); } catch(e){}
                  cb(true);
                }
              });
              return;
            }
          }catch(e){}
          cb(false);
        }

        function openPrivacy(){
          var done=false;
          var t=setTimeout(function(){ if(!done){ done=true; openLocal(); }}, OPEN_TIMEOUT_MS);
          function finish(ok){ if(!done){ done=true; clearTimeout(t); if(!ok) openLocal(); } }

          tryFC(function(fcOk){
            if (fcOk) return finish(true);
            tryTCF(function(tcfOk){
              if (tcfOk) return finish(true);
              finish(false);
            });
          });
        }

        document.addEventListener('click', function(ev){
          var t = ev.target && ev.target.closest && ev.target.closest('[data-privacy-open]');
          if (!t) return;
          ev.preventDefault();
          openPrivacy();
        });

        window.addEventListener('load', function(){
          var tried=false;
          function attempt(){
            if (tried) return; tried=true;
            if (typeof __tcfapi === 'function') {
              try {
                __tcfapi('getTCData', 2, function(data, success){
                  if (!success || !data || !data.tcString) openPrivacy();
                });
              } catch(e){ openPrivacy(); }
            } else {
              openPrivacy();
            }
          }
          setTimeout(attempt, 400);
        }, { once:true });

        window.managePrivacy = openPrivacy;
      })();
    </script>
    <script>
      (function(){
        window.googlefc = window.googlefc || {};
        window.googlefc.callbackQueue = window.googlefc.callbackQueue || [];
        window.googlefc.callbackQueue.push(function(){
          console.log('[FC] initialized:', typeof googlefc.showRevocationMessage === 'function');
        });

        var tm = setInterval(function(){
          if (typeof __tcfapi === 'function') {
            console.log('[TCF] __tcfapi available');
            __tcfapi('getTCData', 2, function(tc, ok){
              console.log('[TCF] getTCData ok=%o tcString=%o', ok, tc && tc.tcString);
            });
            clearInterval(tm);
          }
        }, 500);
      })();
    </script>
  </head>

  <body class="font-sans bg-bg text-text overflow-x-hidden">
    <a
      href="#content"
      class="sr-only focus:not-sr-only focus:fixed focus:left-[max(1rem,env(safe-area-inset-left))] focus:top-4 focus:bg-surface focus:px-3 focus:py-2 focus:rounded"
      >Skip to content</a
    >

    <header
      class="sticky top-0 z-[1000] isolate border-b border-border/60 bg-bg/95 backdrop-blur supports-[backdrop-filter]:bg-bg/70"
    >
      <div
        class="mx-auto max-w-7xl px-4 sm:px-5 py-3 flex items-center gap-4 min-w-0"
      >
        <a href="/" class="flex items-center gap-2 shrink-0">
          <img src="/images/logo.svg" alt="LNF Guides" class="h-7 w-7" />
          <span class="text-lg font-extrabold tracking-tight">LNF Guides</span>
        </a>

        <div class="flex-1 max-w-xl mx-auto hidden md:block min-w-0">
          <button
            id="open-search"
            class="w-full truncate text-left border border-border/60 rounded-full px-4 py-2 text-text2 hover:bg-surface"
            aria-label="Open search (Cmd/Ctrl+K)"
            type="button"
            >Press ⌘/Ctrl K to search…</button
          >
        </div>

        <nav class="flex items-center gap-3 flex-wrap text-sm">
          <a href="/guides/" class="hover:underline">Guides</a>
          <a href="/news/" class="hover:underline">News</a>
          <a href="/updates/" class="hover:underline">Updates</a>
          <a href="/about/" class="hover:underline">About</a>
          <a href="/contact/" class="btn btn-primary">Subscribe</a>
          <button
            class="underline hover:text-text"
            data-privacy-open
            type="button"
            role="button"
            aria-label="Privacy settings"
            >Privacy settings</button
          >
        </nav>
      </div>
    </header>

    <slot name="search" />
    <main id="content" class="w-full overflow-x-hidden">
      <slot />
    </main>

    <footer class="mt-16 border-t border-border/60">
      <div
        class="mx-auto max-w-7xl px-4 sm:px-5 py-12 grid gap-8 md:grid-cols-4 text-sm"
      >
        <section>
          <h3 class="font-semibold mb-3">Site</h3>
          <ul class="space-y-2">
            <li><a href="/">Home</a></li>
            <li><a href="/guides/">Guides</a></li>
            <li><a href="/news/">News</a></li>
            <li><a href="/updates/">Updates</a></li>
          </ul>
        </section>
        <section>
          <h3 class="font-semibold mb-3">Legal</h3>
          <ul class="space-y-2">
            <li><a href="/privacy/">Privacy</a></li>
            <li><a href="/contact/">Contact</a></li>
            <li><a href="/legalnotice/">Legal Notice</a></li>
            <li><a href="/impressum/">Legal Notice (DE) / Impressum</a></li>
          </ul>
        </section>
        <section class="md:col-span-2">
          <h3 class="text-sm font-semibold mb-3">Controls</h3>
          <button class="underline" data-privacy-open type="button">
            Privacy settings
          </button>
        </section>
      </div>
      <div class="mx-auto max-w-7xl px-4 sm:px-5 pb-10 text-xs text-text2">
        Unofficial fan site. Not affiliated with Hello Games.
      </div>
    </footer>

    <!-- Search trigger -->
    <script>
      document.getElementById('open-search')?.addEventListener('click', () =>
        window.dispatchEvent(new KeyboardEvent('keydown', { key: 'k', ctrlKey: true }))
      );
    </script>

    <!-- Opener: 1) Funding Choices, 2) TCF displayConsentUi, 3) lokales UI — mit Watchdog -->
    <script>
      (function(){
        function callWhenReady(fn, timeout){
          var done = false;
          var timer = setTimeout(function(){ if (!done) fn(false); }, timeout || 1500);
          return function(ok){
            if (!done){ done = true; clearTimeout(timer); fn(!!ok); }
          };
        }

        function tryOpenFundingChoices(cb){
          try {
            window.googlefc = window.googlefc || {};
            window.googlefc.callbackQueue = window.googlefc.callbackQueue || [];
            window.googlefc.callbackQueue.push(function() {
              try {
                if (typeof googlefc.showRevocationMessage === 'function') {
                  googlefc.showRevocationMessage();
                  cb(true); return;
                }
              } catch(e){}
              cb(false);
            });
          } catch(e){ cb(false); }
        }

        function tryOpenTCF(cb){
          try {
            if (typeof __tcfapi === 'function') {
              __tcfapi('displayConsentUi', 2, function(){});
              cb(true); return;
            }
          } catch(e){}
          cb(false);
        }

        function openPrivacy(){
          tryOpenFundingChoices(callWhenReady(function(fcOk){
            if (fcOk) return;
            tryOpenTCF(callWhenReady(function(tcfOk){
              if (tcfOk) return;
              if (window.consentUI && typeof window.consentUI.open === 'function') {
                window.consentUI.open('settings');
              }
            }, 800));
          }, 1200));
        }

        document.addEventListener('click', function(ev){
          const t = ev.target?.closest?.('[data-privacy-open]');
          if (!t) return;
          ev.preventDefault();
          openPrivacy();
        });

        window.managePrivacy = openPrivacy;

        window.addEventListener('load', function(){
          try {
            if (typeof __tcfapi === 'function') {
              __tcfapi('getTCData', 2, function(tcData, success){
                if (!success || !tcData || !tcData.tcString) openPrivacy();
              });
            } else {
              setTimeout(openPrivacy, 600);
            }
          } catch(e){}
        }, { once:true });
      })();
    </script>

    <!-- Externe Embeds: Consent-Record führend -->
    <script>
      (function(){
        window.lnfExternal = {
          get(){
            try {
              var via = window.consent && typeof window.consent.get==='function' ? window.consent.get() : null;
              if (via && typeof via.external==='boolean') return !!via.external;
            } catch(e){}
            try { return !!JSON.parse(localStorage.getItem('lnf-external-embeds')||'false'); } catch { return false; }
          },
          set(v){
            var val = !!v;
            try { window.consent?.set?.({ external: val }); } catch(e){}
            try { localStorage.setItem('lnf-external-embeds', JSON.stringify(val)); } catch {}
            try {
              var d = (window.lnfConsent && window.lnfConsent.get && window.lnfConsent.get()) || {};
              var detail = { analytics:!!d.analytics, ads:!!d.ads, adsPersonalized:!!d.adsPersonalized, external:val };
              window.dispatchEvent(new CustomEvent('consent:changed', { detail }));
              window.dispatchEvent(new Event('consent:updated'));
            } catch(e){}
          }
        };
      })();
    </script>

    <!-- AdSense immer geladen; PA/NPA/LTD über Consent Mode/TCF -->
    <ConsentBanner />
  </body>
</html>
