---
import BaseLayout from './BaseLayout.astro';
import Breadcrumbs from '../components/Breadcrumbs.astro';
import TOC from '../components/TOC.astro';
import SearchOverlay from '../components/SearchOverlay.astro';
import AdsSlot from '../components/AdsSlot.astro';
import CommentsGiscus from '../components/CommentsGiscus.astro';
import RelatedPosts from '../components/RelatedPosts.astro';
import PrevNext from '../components/PrevNext.astro';

import {
  buildBreadcrumbLD,
  buildArticleLD,
  buildFAQPage,
  type FAQSection
} from '../lib/schema';

const { frontmatter, headings, currentSlug } = Astro.props as {
  frontmatter: any;
  headings: { depth: number; slug: string; text: string }[];
  currentSlug: string;
};

const canonical = new URL(Astro.url.pathname, Astro.site).toString();
const pubISO = new Date(frontmatter.pubDate).toISOString();
const updISO = frontmatter.updatedDate ? new Date(frontmatter.updatedDate).toISOString() : undefined;

// Cover absolut machen (für OG+LD)
function toAbs(u: string | undefined) {
  try {
    if (!u) return undefined;
    if (/^https?:\/\//i.test(u)) return u;
    return new URL(u, Astro.site).toString();
  } catch { return u; }
}
const absCover = toAbs(frontmatter.cover);

const breadcrumbLD = buildBreadcrumbLD([
  { name: 'Guides', url: new URL('/guides/', Astro.site).toString() },
  { name: frontmatter.category, url: new URL(`/guides/${frontmatter.category}/`, Astro.site).toString() },
  { name: frontmatter.title, url: canonical },
]);

// erweitertes Article-LD: publisher/author/keywords/inLanguage
const baseArticleLD = buildArticleLD({
  type: frontmatter?.schema?.type || 'Article',
  headline: frontmatter.title,
  description: frontmatter.description,
  datePublished: pubISO,
  dateModified: updISO,
  image: absCover ? [absCover] : undefined,
  canonical,
  author: { "@type": "Organization", name: "LNF Guides", url: new URL('/', Astro.site).toString() },
  publisher: {
    "@type": "Organization",
    name: "LNF Guides",
    logo: { "@type": "ImageObject", url: new URL('/images/logo.svg', Astro.site).toString() }
  },
  inLanguage: "en",
  keywords: Array.isArray(frontmatter.tags) ? frontmatter.tags.join(', ') : undefined
});

// ---- FAQ: robust gegen verschiedene Quellen ----
const faqSections = (frontmatter?.faqSections || []) as FAQSection[];
const fallbackFAQ = frontmatter?.schema?.faq || [];
const faqPage = buildFAQPage(faqSections, fallbackFAQ, { name: 'FAQ' });

// optionale zusätzliche Schemas (Array von Objekten)
const extraSchemas = frontmatter?.schema?.extra || [];

// DEV-Check: Zahlen inlined in die Seite (kann nach Debug entfernt werden)
const _FAQ_DEBUG = {
  hasFaqSections: Array.isArray(faqSections),
  faqSectionsCount: Array.isArray(faqSections) ? faqSections.length : 0,
  fallbackFaqCount: Array.isArray(fallbackFAQ) ? fallbackFAQ.length : 0,
  faqRendered: !!faqPage,
};
---

<BaseLayout
  title={frontmatter.title}
  description={frontmatter.description}
  canonical={canonical}
  ogImage={absCover}
  category={frontmatter.category}
  type="article"
  locale="en_US"
  imageAlt={frontmatter.title}
  article={{
    published: pubISO,
    modified: updISO,
    author: "LNF Guides",
    section: frontmatter.category,
    tags: frontmatter.tags
  }}
>
  <Fragment slot="search"><SearchOverlay /></Fragment>

  <div class="mx-auto max-w-7xl container-px mt-8 grid gap-8 lg:grid-cols-[1fr_minmax(720px,760px)_1fr]">
    <div class="hidden lg:block min-w-0"><TOC headings={headings} /></div>

    <article class="prose prose-invert max-w-[760px] w-full">
      <Breadcrumbs items={[
        {name:'Guides', href:'/guides/'},
        {name:frontmatter.category, href:`/guides/${frontmatter.category}/`},
        {name:frontmatter.title}
      ]} />

      <h1>{frontmatter.title}</h1>
      <p class="text-sm text-text2">
        <time datetime={pubISO}>{new Date(frontmatter.pubDate).toLocaleDateString('en-US')}</time>
        {frontmatter.updatedDate && <span> • Updated <time datetime={updISO}>{new Date(frontmatter.updatedDate).toLocaleDateString('en-US')}</time></span>}
        {frontmatter.readingTime && <span> • {frontmatter.readingTime} min read</span>}
      </p>

      {frontmatter.cover && (
        <img
          src={frontmatter.cover}
          alt={frontmatter.title}
          loading="lazy"
          decoding="async"
          class="w-full aspect-[16/9] object-cover rounded-card shadow-soft border border-border/60"
        />
      )}

      <div class="ad-box aspect-video mt-4">
        <AdsSlot name="article-top" provider="adsense" adsClient="ca-pub-6618488631609364" adSlot="1234567890" />
      </div>

      <slot />

      <div class="ad-box aspect-video mt-8">
        <AdsSlot name="SidebarTop" provider="adsense" adsClient="ca-pub-6618488631609364" adSlot="1234567890" />
      </div>

      <PrevNext currentSlug={currentSlug} category={frontmatter.category} />
      <RelatedPosts currentSlug={currentSlug} category={frontmatter.category} tags={frontmatter.tags} />
    </article>

    <div class="hidden lg:block"></div>

    <div class="lg:col-start-2 lg:col-end-3">
      <CommentsGiscus
        repo="MarkusPolo/lnf-guides"
        repoId="R_kgDOPnP3Sw"
        category="General"
        categoryId="DIC_kwDOPnP3S84Cu0C0"
        mapping="pathname"
        lang="en"
        theme="preferred_color_scheme"
      />
    </div>
  </div>

  <!-- JSON-LD -->
  <script type="application/ld+json" is:inline set:html={JSON.stringify(baseArticleLD)} />
  <script type="application/ld+json" is:inline set:html={JSON.stringify(breadcrumbLD)} />
  {faqPage && <script type="application/ld+json" is:inline set:html={JSON.stringify(faqPage)} />}
  {Array.isArray(extraSchemas) && extraSchemas.map((obj: any) => (
    <script type="application/ld+json" is:inline set:html={JSON.stringify(obj)} />
  ))}

  <!-- FAQ DEBUG (entfernen, sobald alles ok) -->
  <script is:inline>
    try {
      window.__FAQ_DEBUG = { ...JSON.parse('{'+
        '"hasFaqSections":' + JSON.stringify(_FAQ_DEBUG.hasFaqSections) + ',' +
        '"faqSectionsCount":' + JSON.stringify(_FAQ_DEBUG.faqSectionsCount) + ',' +
        '"fallbackFaqCount":' + JSON.stringify(_FAQ_DEBUG.fallbackFaqCount) + ',' +
        '"faqRendered":' + JSON.stringify(_FAQ_DEBUG.faqRendered) +
      '}') };
      console.debug('[FAQ]', window.__FAQ_DEBUG);
    } catch {}
  </script>
</BaseLayout>
